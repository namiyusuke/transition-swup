---
// ====================================
// Import
// ====================================
// Config
import { SITE, COMPANY, SNS } from "../config";
import { schema } from "../functions/schema";

// Component
import GlobalHeader from "../components/global/GlobalHeader.astro";
import GlobalFooter from "../components/global/GlobalFooter.astro";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
const jsonLd = schema(description);
---

<!doctype html>
<html lang="ja" data-script>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`${SITE.url}/ogp.png`} />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="ja_JP" />
    <meta property="og:site_name" content={SITE.name} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content={SNS.twitter} />
    <meta name="format-detection" content="telephone=no, email=no, address=no" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
    />
    <link rel="canonical" href={Astro.url} />
    <link rel="icon" type="image/svg+xml" href={`${SITE.base}favicon.svg`} />
    <link rel="apple-touch-icon" sizes="180x180" href={`${SITE.base}apple-touch-icon.png`} />
    <title>{title}</title>
    <script type="application/ld+json" set:html={jsonLd} is:inline />
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${SITE.trackingId}`} is:inline></script>
    <script define:vars={{ trackingId: SITE.trackingId }} is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", trackingId);
    </script>
  </head>
  <body>
    <GlobalHeader />
    <div class="p-transition">
      <svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none">
        <path class="transition-path1" d="M 0 100 V 150 Q  50 50 100 150 V 100 z"></path>
        <path class="transition-path2" d="M 0 100 V 150 Q  50 50 100 150 V 100 z"></path>
        <path class="transition-path3" d="M 0 100 V 150 Q  50 50 100 150 V 100 z"></path>
      </svg>
    </div>
    <slot />
    <GlobalFooter />
  </body>
</html>
<style is:global>
  :root {
  }
  .p-transition {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 300;
    width: 100%;
    height: 100vh;
    height: 100dvh;
    pointer-events: none;
    visibility: visible;
  }
  .p-transition.-is-changing {
    visibility: visible;
  }
  .transition-path1 {
    fill: #ff8c76;
  }
  .transition-path2 {
    fill: #f96548;
  }
  .transition-path3 {
    fill: #f94f2e;
  }
</style>
<script>
  // import actionIn from "@assets/js/libs/Swup";

  // actionIn();

  import Swup from "swup";
  import SwupJsPlugin from "@swup/js-plugin";

  // import SwupHeadPlugin from "@swup/head-plugin";
  // import SwupScriptsPlugin from '@swup/scripts-plugin';
  import { gsap } from "gsap";
  // const swup = new Swup({
  //   plugins: [
  //     new SwupHeadPlugin(),
  //     // new SwupScriptsPlugin()
  //   ],
  // });
  const path1 = document.querySelector(".transition-path1");
  const path2 = document.querySelector(".transition-path2");
  const path3 = document.querySelector(".transition-path3");
  const path_mask = document.querySelector("#clip-path-nav-sp path");
  const svg_in1 = "M 0 0 V 0 Q 50 0 100 0 V 0 z";
  const svg_in2 = "M 0 0 V 70 Q 50 110 100 70 V 0 z";
  const svg_in3 = "M 0 0 V 100 Q 50 100 100 100 V 0 z";
  const svg_out1 = "M 0 0 V 100 Q 50 100 100 100 V 0 z";
  const svg_out2 = "M 0 0 V 70 Q 50 110 100 70 V 0 z";
  const svg_out3 = "M 0 0 V 0 Q 50 0 100 0 V 0 z";

  // const svg_outa = "M 0 100 V 150 Q 50 50 100 150 V 100 z";
  const svg_outb = "M 0 100 V 0 Q 50 -1 100 0 V 100 z";
  const tl1 = gsap.timeline({ delay: 0.25 });
  const tl2 = gsap.timeline({ delay: 0.5 });
  const tl3 = gsap.timeline({ delay: 0.75 });
  const tl4 = gsap.timeline({ delay: 0.25 });
  const tl5 = gsap.timeline({ delay: 0.5 });
  const tl6 = gsap.timeline({ delay: 0.75 });
  const tl = gsap.timeline();
  function startLoading() {
    tl1
      .set(path1, { attr: { d: svg_in1 } })
      .to(path1, { duration: 1, attr: { d: svg_in2 }, ease: "power3.inOut" })
      .to(path1, { duration: 1, attr: { d: svg_in3 }, ease: "power3.inOut" });
    tl2
      .set(path2, { attr: { d: svg_in1 } })
      .to(path2, { duration: 1, attr: { d: svg_in2 }, ease: "power3.inOut" })
      .to(path2, { duration: 1, attr: { d: svg_in3 }, ease: "power3.inOut" });
    tl3
      .set(path3, { attr: { d: svg_in1 } })
      .to(path3, { duration: 1, attr: { d: svg_in2 }, ease: "power3.inOut" })
      .to(path3, { duration: 1, attr: { d: svg_in3 }, ease: "power3.inOut" });
  }
  function endLoading() {
    tl.set(path1, { attr: { d: svg_out1 } })
      .to(path1, { duration: 1, attr: { d: svg_out2 }, ease: "power3.inOut" })
      .to(path1, { duration: 1, attr: { d: svg_out3 }, ease: "power3.inOut" });
    tl5
      .set(path2, { attr: { d: svg_out1 } })
      .to(path2, { duration: 1, attr: { d: svg_out2 }, ease: "power3.inOut" })
      .to(path2, { duration: 1, attr: { d: svg_out3 }, ease: "power3.inOut" });
    tl4
      .set(path3, { attr: { d: svg_out1 } })
      .to(path3, { duration: 1, attr: { d: svg_out2 }, ease: "power3.inOut" })
      .to(path3, { duration: 1, attr: { d: svg_out3 }, ease: "power3.inOut" });
  }
  function Loading2() {
    tl.set(path1, { attr: { d: svg_in3 } }).to(path1, { duration: 1, attr: { d: svg_outb }, ease: "power3.inOut" });
    tl.set(path2, { attr: { d: svg_in3 } }).to(path2, { duration: 1, attr: { d: svg_outb }, ease: "power3.inOut" });
    tl.set(path3, { attr: { d: svg_in3 } }).to(path3, { duration: 1, attr: { d: svg_outb }, ease: "power3.inOut" });
  }
  // startLoading();
  // setTimeout(()=>{
  //  Loading2();
  // },5000);
  const F = "M 0 100 V 150 Q  50 50 100 150 V 100 z";
  const E = "M 0 100 V 0 Q 50 -1 100 0 V 100 z";
  const G = "M 0 0 V 150 Q 50 50 100 150 V 0 z";
  const H = "M 0 0 V 0 Q 50 0 100 0 V 0 z";
  function startLoading1() {
    tl1.set(path1, { attr: { d: F } }).to(path1, { duration: 1, attr: { d: E }, ease: "power3.inOut" });
    tl2.set(path2, { attr: { d: F } }).to(path2, { duration: 1, attr: { d: E }, ease: "power3.inOut", delay: 0.25 });
    tl3.set(path3, { attr: { d: F } }).to(path3, { duration: 1, attr: { d: E }, ease: "power3.inOut", delay: 0.45 });
  }
  function startLoading2() {
    tl1.set(path1, { attr: { d: G } }).to(path1, { duration: 1, attr: { d: H }, ease: "power3.inOut" });
    tl2.set(path2, { attr: { d: G } }).to(path2, { duration: 1, attr: { d: H }, ease: "power3.inOut" });
    tl3.set(path3, { attr: { d: G } }).to(path3, { duration: 1, attr: { d: H }, ease: "power3.inOut" });
  }
  // startLoading1();
  // export default function actionIn() {
  const swup = new Swup({
    plugins: [
      new SwupJsPlugin({
        animations: [
          /* your custom animation functions */
          {
            from: "(.*)", // matches any route
            to: "(.*)", // matches any route
            out: async () => {
              await Promise.all([
                tl1.set(path1, { attr: { d: F } }).to(path1, { duration: 1, attr: { d: E }, ease: "power3.inOut" }),
                tl2
                  .set(path2, { attr: { d: F } })
                  .to(path2, { duration: 1, attr: { d: E }, ease: "power3.inOut", delay: 0.25 }),
                tl3
                  .set(path3, { attr: { d: F } })
                  .to(path3, { duration: 1, attr: { d: E }, ease: "power3.inOut", delay: 0.45 }),
              ]);
            },
            in: async () => {
              await startLoading2();
            }, // immediately continues
          },
        ],
      }),
    ],
  });
  // swup.hooks.on('page:view', (visit) => {
  //   console.log('New page loaded:', visit.to.url);
  // });
  //  }
</script>
